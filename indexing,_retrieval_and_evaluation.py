# -*- coding: utf-8 -*-
"""indexing, retrieval and evaluation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MEGUEQA9pICmDh5DX5wOoJVakoN3K2h7
"""

# first we import the required packages

# import utility packages
import urllib.request 
import time
import xml.etree.ElementTree as ET
import os
import pandas as pd

pip install python-terrier

# start pyterrier

import pyterrier as pt
pt.init()

# getting our documents

dirpath = r'testdir'

# just for checking purposes
#for files in os.listdir(dirpath):
    #print(files)

# now we need to create a corpus

def get_corpus():
  docnumber = []
  docbody = []
  for file in os.listdir(dirpath):
    if file.endswith('.xml'):
        with open('testdir/'+file, 'rb'):
            #doctest = {'docno': [], 'text': []}
            root = ET.parse('testdir/'+file).getroot()
            docid = root.find('id_info/nct_id').text
            doctext = ''.join(root.itertext())
            docnumber.append(docid)
            docbody.append(doctext)
  return [(docnumber, docbody) for docnumber, docbody in  zip(docnumber, docbody)]

corpus = get_corpus()

# create a df that we will later index

df = pd.DataFrame({"docno": [], "text": []})

for i in range(len(corpus)):
  new_values = []
  new_values.append(corpus[i][0])
  new_values.append(corpus[i][1])
  df.loc[i] = new_values

# get our topics and qrels

dataset = pt.get_dataset("irds:clinicaltrials/2021/trec-ct-2021")
topics = dataset.get_topics()
qrels = dataset.get_qrels()

# index our df

pd_indexer = pt.DFIndexer("./pd_index")
indexref = pd_indexer.index(df["text"], df["docno"])

# build our bm25 retrieval model
bm25 = pt.BatchRetrieve(indexref, wmodel="BM25", num_results=1000)

# retrieve based on the query - here we will need to change the 'topics' with the input chosen by the user

res = bm25.transform(topics)

# we can now create a list of clinical ids of the first 10 results - they are chosen based on the bm25 score

output = res.loc[0:10, 'docno'].tolist()

# EVALUATION

# we can create a simple evaluation function that gives us the difference between the bm25 model with our dynamic stopword list and the normal one

# first create a new index

idex_dynamic = pd_indexer.index(df['text'], df['docno'], stopwords = custom)

# now we can create a new bm25 model

bm25_dynamic = pt.BatchRetrieve(idex_dynamic, wmodel="BM25", num_results=1000)

# finally, we can build the comparing framework

pt.Experiment([bm25, bm25_dynamic], topics, qrels, ['map', 'ndcg'])

